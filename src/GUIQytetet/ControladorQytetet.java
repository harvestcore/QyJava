/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIQytetet;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import qytetetjava.Casilla;
import qytetetjava.Jugador;
import qytetetjava.MetodoSalirCarcel;
import qytetetjava.Qytetet;
import qytetetjava.TipoCasilla;
import qytetetjava.TipoSorpresa;

/**
 *
 * @author Angel
 */
public class ControladorQytetet extends javax.swing.JFrame {    
    private Qytetet modeloQytetet;
    private boolean anteriorJuez = false;
    
    /**
     * Creates new form ControladorQytetet
     */
    public ControladorQytetet() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        toggleJugar = new javax.swing.JButton();
        togglePasarTurno = new javax.swing.JButton();
        toggleActivarSorpresa = new javax.swing.JButton();
        toggleCarcelPagando = new javax.swing.JButton();
        toggleCarcelDado = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        toggleComprar = new javax.swing.JButton();
        toggleHipotecar = new javax.swing.JButton();
        toggleEdificarCasa = new javax.swing.JButton();
        toggleVender = new javax.swing.JButton();
        toggleEdificarHotel = new javax.swing.JButton();
        toggleCancelarHipoteca = new javax.swing.JButton();
        vistaQytetet = new GUIQytetet.VistaQytetet();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Qytetet v1.0.0");
        setMaximumSize(new java.awt.Dimension(840, 660));
        setMinimumSize(new java.awt.Dimension(840, 660));
        setPreferredSize(new java.awt.Dimension(840, 660));
        getContentPane().setLayout(new java.awt.FlowLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(279, 168));
        jPanel1.setMinimumSize(new java.awt.Dimension(279, 168));

        toggleJugar.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleJugar.setText("Jugar");
        toggleJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleJugarActionPerformed(evt);
            }
        });

        togglePasarTurno.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        togglePasarTurno.setText("Pasar turno");
        togglePasarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePasarTurnoActionPerformed(evt);
            }
        });

        toggleActivarSorpresa.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleActivarSorpresa.setText("Activar sorpresa");
        toggleActivarSorpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleActivarSorpresaActionPerformed(evt);
            }
        });

        toggleCarcelPagando.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleCarcelPagando.setText("Salir cárcel $$$");
        toggleCarcelPagando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleCarcelPagandoActionPerformed(evt);
            }
        });

        toggleCarcelDado.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleCarcelDado.setText("Salir cárcel dado");
        toggleCarcelDado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleCarcelDadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(togglePasarTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toggleCarcelPagando, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleCarcelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleActivarSorpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(toggleActivarSorpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toggleCarcelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(toggleCarcelPagando, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(toggleJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(togglePasarTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Acciones", jPanel1);

        getContentPane().add(jTabbedPane2);

        toggleComprar.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleComprar.setText("Comprar prop.");
        toggleComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleComprarActionPerformed(evt);
            }
        });

        toggleHipotecar.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleHipotecar.setText("Hipotecar");
        toggleHipotecar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleHipotecarActionPerformed(evt);
            }
        });

        toggleEdificarCasa.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleEdificarCasa.setText("Edificar casa");
        toggleEdificarCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleEdificarCasaActionPerformed(evt);
            }
        });

        toggleVender.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleVender.setText("Vender prop.");
        toggleVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleVenderActionPerformed(evt);
            }
        });

        toggleEdificarHotel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleEdificarHotel.setText("Edificar hotel");
        toggleEdificarHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleEdificarHotelActionPerformed(evt);
            }
        });

        toggleCancelarHipoteca.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        toggleCancelarHipoteca.setText("Cancelar hip.");
        toggleCancelarHipoteca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleCancelarHipotecaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(toggleComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(toggleEdificarCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(toggleHipotecar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(toggleVender, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(toggleEdificarHotel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toggleCancelarHipoteca, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(toggleEdificarCasa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleComprar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toggleHipotecar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(toggleEdificarHotel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toggleVender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toggleCancelarHipoteca, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Gestiones", jPanel2);

        getContentPane().add(jTabbedPane1);
        getContentPane().add(vistaQytetet);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void togglePasarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePasarTurnoActionPerformed
        modeloQytetet.siguienteJugador();
        toggleJugar.setEnabled(true);
        toggleComprar.setEnabled(false);
        togglePasarTurno.setEnabled(false);
        toggleActivarSorpresa.setEnabled(false);
        vistaQytetet.actualizar(modeloQytetet);
        vistaQytetet.actualizarInfo("Turno de: " + modeloQytetet.getJugadorActual().getNombre());
        checkBancarrota();
    }//GEN-LAST:event_togglePasarTurnoActionPerformed

    private void toggleCarcelPagandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCarcelPagandoActionPerformed
        boolean resultado = modeloQytetet.intentarSalirCarcel(MetodoSalirCarcel.PAGANDOLIBERTAD);
        toggleCarcelPagando.setEnabled(false);
        toggleCarcelDado.setEnabled(false);
        
        if (resultado) {
            vistaQytetet.actualizarInfo("Pagas 200 euros y sales de la cárcel.");
            JOptionPane.showMessageDialog(this, "Has pagado 200 euros. \nSales de la cárcel.");
            toggleJugar.setEnabled(true);
        } else {
            vistaQytetet.actualizarInfo("No sales de la cárcel.");
            JOptionPane.showMessageDialog(this, "No sales de la cárcel.");
            togglePasarTurno.setEnabled(true);
        }
        
        checkBancarrota();
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleCarcelPagandoActionPerformed

    private void toggleJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleJugarActionPerformed
        toggleBotonesCarcel();
        boolean casillaActualSorpresa = false;
        
        if (!jugadorEncarcelado()) {
            boolean jugada = modeloQytetet.jugar();
            if (jugada) {
                System.out.print("ok");
            }
            
            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.JUEZ) {
                anteriorJuez = true;
                vistaQytetet.actualizarInfo("El juez te manda a la cárcel.");
                modeloQytetet.getJugadorActual().irACarcel(modeloQytetet.getCarcel());
                vistaQytetet.actualizar(modeloQytetet);
                togglePasarTurno.setEnabled(true);
            }
            
            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CARCEL && !jugadorEncarcelado()) {
                vistaQytetet.actualizarInfo("Estás en la casilla cárcel.");
                vistaQytetet.actualizar(modeloQytetet);
            }

            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.PARKING) {
                vistaQytetet.actualizarInfo("Estás en el parking.");
                vistaQytetet.actualizar(modeloQytetet);
            }

            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.IMPUESTO) {
                vistaQytetet.actualizarInfo("Pagas un impuesto de 1500 euros.");
                vistaQytetet.actualizar(modeloQytetet);
                JOptionPane.showMessageDialog(this, "Tienes que pagar un impuesto de 1500 euros.");
            }

            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.SALIDA) {
                vistaQytetet.actualizarInfo("Has pasado por la salida y has recibido 1000 euros.");
                vistaQytetet.actualizar(modeloQytetet);
                JOptionPane.showMessageDialog(this, "Pasas por la salida y recibes 1000 euros.");
            }
            
            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.SORPRESA) {
                vistaQytetet.actualizarInfo("¡¡Sorpresa!!");
                vistaQytetet.actualizar(modeloQytetet);
                toggleActivarSorpresa.setEnabled(true);
                toggleComprar.setEnabled(false);
                toggleVender.setEnabled(false);
                toggleHipotecar.setEnabled(false);
                toggleCancelarHipoteca.setEnabled(false);
                toggleEdificarCasa.setEnabled(false);
                toggleEdificarHotel.setEnabled(false);
                vistaQytetet.actualizar(modeloQytetet);
                casillaActualSorpresa = true;
            }
            
            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CALLE) {
                if (modeloQytetet.getJugadorActual().getCasillaActual().getTituloPropiedad().getPropietario() == null) {
                    toggleComprar.setEnabled(true);
                    vistaQytetet.actualizar(modeloQytetet);
                    checkBancarrota();
                }
                
                if ((modeloQytetet.getJugadorActual().getCasillaActual().getTituloPropiedad().getPropietario() != modeloQytetet.getJugadorActual()) && (modeloQytetet.getJugadorActual().getCasillaActual().getTituloPropiedad().getPropietario() != null)) {
                    JOptionPane.showMessageDialog(this, "Tienes que pagar el alquiler tras caer en esta casilla.");
                    vistaQytetet.actualizar(modeloQytetet);
                    vistaQytetet.actualizarInfo("Pagas el alquiler.");
                }
            }
            
            checkBancarrota();
            toggleJugar.setEnabled(false);
            if(casillaActualSorpresa)
                togglePasarTurno.setEnabled(false);
            else
                togglePasarTurno.setEnabled(true);
        } else {
            toggleJugar.setEnabled(false);
            togglePasarTurno.setEnabled(false);
        }
        
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleJugarActionPerformed

    private void toggleComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleComprarActionPerformed
        if (!jugadorEnBancarrota() && !jugadorEncarcelado()) {
                if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CALLE) {
                    if (modeloQytetet.getJugadorActual().getCasillaActual().getTituloPropiedad().getPropietario() == null) {
                        if (modeloQytetet.comprarTituloPropiedad()) {
                            JOptionPane.showMessageDialog(this, "Has comprado la propiedad: " + modeloQytetet.getJugadorActual().getCasillaActual().getTituloPropiedad().getNombre());
                            vistaQytetet.actualizarInfo("Has comprado una propiedad.");
                        } else {
                            JOptionPane.showMessageDialog(this, "No tienes dinero para comprar la propiedad.");
                            vistaQytetet.actualizarInfo("No compras la propiedad.");
                        }
                        vistaQytetet.actualizar(modeloQytetet);
                        checkBancarrota();
                    }
                }
            }
        checkBancarrota();
        toggleComprar.setEnabled(false);
    }//GEN-LAST:event_toggleComprarActionPerformed

    private void toggleActivarSorpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleActivarSorpresaActionPerformed
        boolean sorpresaAplicada = modeloQytetet.aplicarSorpresa();
        checkBancarrota();
        if (sorpresaAplicada) {
            if (!jugadorEncarcelado()) {
                checkBancarrota();
                if (!jugadorEnBancarrota()) {
                    if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CALLE) {
                        if (modeloQytetet.getJugadorActual().getCasillaActual().getTituloPropiedad().getPropietario() == null) {
                            toggleComprar.setEnabled(true);
                            checkBancarrota();
                        }
                    }
                }
            }
        }
        
        if (modeloQytetet.getCartaActual().getTipoSorpresa() == TipoSorpresa.CONVERTIRME) {
            int value = modeloQytetet.getCartaActual().getValor();
            JOptionPane.showMessageDialog(this, "Te conviertes en especulador.\nValor: " + value);
        }
        
        checkBancarrota();
        vistaQytetet.actualizar(modeloQytetet);
        togglePasarTurno.setEnabled(true);
        toggleVender.setEnabled(true);
        toggleHipotecar.setEnabled(true);
        toggleCancelarHipoteca.setEnabled(true);
        toggleEdificarCasa.setEnabled(true);
        toggleEdificarHotel.setEnabled(true);
        toggleActivarSorpresa.setEnabled(false);
    }//GEN-LAST:event_toggleActivarSorpresaActionPerformed

    private void toggleEdificarCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleEdificarCasaActionPerformed
        JPanel panel = new JPanel();
        panel.add(new JLabel("Elige una propiedad:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        ArrayList<String> props = modeloQytetet.getJugadorActual().getPropiedades(1);
        if (props.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No tienes propiedades donde edificar una casa.");
        } else {
            for (String s : props) {
                model.addElement(s);
            }
            JComboBox comboBox = new JComboBox(model);
            panel.add(comboBox);

            int result = JOptionPane.showConfirmDialog(null, panel, "Edificar casa", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch (result) {
                case JOptionPane.OK_OPTION:
                    System.out.println("Has seleccionado " + comboBox.getSelectedItem());
                    break;
            }
            
            Casilla aux = modeloQytetet.getJugadorActual().searchCasilla((String) comboBox.getSelectedItem());
            boolean done = modeloQytetet.edificarCasa(aux);
            if (!done) {
                JOptionPane.showMessageDialog(this, "No tienes suficiente dinero.");
                vistaQytetet.actualizarInfo("No tienes suficiente dinero.");
            }
            else
                vistaQytetet.actualizarInfo("Has edificado una casa.");
        }
        
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleEdificarCasaActionPerformed

    private void toggleEdificarHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleEdificarHotelActionPerformed
        JPanel panel = new JPanel();
        panel.add(new JLabel("Elige una propiedad:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        ArrayList<String> props = modeloQytetet.getJugadorActual().getPropiedades(2);
        if (props.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No tienes propiedades donde edificar un hotel.");
        } else {
            for (String s : props) {
                model.addElement(s);
            }
            JComboBox comboBox = new JComboBox(model);
            panel.add(comboBox);

            int result = JOptionPane.showConfirmDialog(null, panel, "Edificar hotel", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch (result) {
                case JOptionPane.OK_OPTION:
                    System.out.println("Has seleccionado " + comboBox.getSelectedItem());
                    break;
            }
            
            Casilla aux = modeloQytetet.getJugadorActual().searchCasilla((String) comboBox.getSelectedItem());
            boolean done = modeloQytetet.edificarHotel(aux);
            if (!done) {
                JOptionPane.showMessageDialog(this, "No tienes suficiente dinero.");
                vistaQytetet.actualizarInfo("No tienes suficiente dinero.");
            }
            else
                vistaQytetet.actualizarInfo("Has edificado un hotel.");
        }
        
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleEdificarHotelActionPerformed

    private void toggleVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleVenderActionPerformed
        JPanel panel = new JPanel();
        panel.add(new JLabel("Elige una propiedad:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        ArrayList<String> props = modeloQytetet.getJugadorActual().getPropiedades(3);
        if (props.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No tienes propiedades para vender.");
        } else {
            for (String s : props) {
                model.addElement(s);
            }
            JComboBox comboBox = new JComboBox(model);
            panel.add(comboBox);

            int result = JOptionPane.showConfirmDialog(null, panel, "Vender propiedad", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch (result) {
                case JOptionPane.OK_OPTION:
                    System.out.println("Has seleccionado " + comboBox.getSelectedItem());
                    break;
            }
            
            Casilla aux = modeloQytetet.getJugadorActual().searchCasilla((String) comboBox.getSelectedItem());
            boolean done = modeloQytetet.venderPropiedad(aux);
            if (done)
                vistaQytetet.actualizarInfo("Has vendido la propiedad.");
            else
                vistaQytetet.actualizarInfo("No vendes la propiedad.");
        }
        
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleVenderActionPerformed

    private void toggleHipotecarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleHipotecarActionPerformed
        JPanel panel = new JPanel();
        panel.add(new JLabel("Elige una propiedad:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        ArrayList<String> props = modeloQytetet.getJugadorActual().getPropiedades(4);
        if (props.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No tienes propiedades para hipotecar.");
        } else {
            for (String s : props) {
                model.addElement(s);
            }
            JComboBox comboBox = new JComboBox(model);
            panel.add(comboBox);

            int result = JOptionPane.showConfirmDialog(null, panel, "Hipotecar propiedad", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch (result) {
                case JOptionPane.OK_OPTION:
                    System.out.println("Has seleccionado " + comboBox.getSelectedItem());
                    break;
            }
            
            Casilla aux = modeloQytetet.getJugadorActual().searchCasilla((String) comboBox.getSelectedItem());
            modeloQytetet.hipotecarPropiedad(aux);
            vistaQytetet.actualizarInfo("Has hipotecado la propiedad.");
        }
        
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleHipotecarActionPerformed

    private void toggleCancelarHipotecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCancelarHipotecaActionPerformed
        JPanel panel = new JPanel();
        panel.add(new JLabel("Elige una propiedad:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        ArrayList<String> props = modeloQytetet.getJugadorActual().getPropiedades(5);
        if (props.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No tienes propiedades hipotecadas.");
        } else {
            for (String s : props) {
                model.addElement(s);
            }
            JComboBox comboBox = new JComboBox(model);
            panel.add(comboBox);

            int result = JOptionPane.showConfirmDialog(null, panel, "Cancelar hipoteca", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch (result) {
                case JOptionPane.OK_OPTION:
                    System.out.println("Has seleccionado " + comboBox.getSelectedItem());
                    break;
            }
            
            Casilla aux = modeloQytetet.getJugadorActual().searchCasilla((String) comboBox.getSelectedItem());
            modeloQytetet.hipotecarPropiedad(aux);
            vistaQytetet.actualizarInfo("Has cancelado la hipoteca de la propiedad.");
        }
        
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleCancelarHipotecaActionPerformed

    private void toggleCarcelDadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCarcelDadoActionPerformed
        boolean resultado = modeloQytetet.intentarSalirCarcel(MetodoSalirCarcel.TIRANDODADO);
        toggleCarcelPagando.setEnabled(false);
        toggleCarcelDado.setEnabled(false);
        
        if (resultado) {
            vistaQytetet.actualizarInfo("Sales de la cárcel.");
            JOptionPane.showMessageDialog(this, "Has obtenido 6. \nSales de la cárcel.");
            toggleJugar.setEnabled(true);
        } else {
            vistaQytetet.actualizarInfo("No sales de la cárcel.");
            JOptionPane.showMessageDialog(this, "No sales de la cárcel.");
        }
        
        checkBancarrota();
        vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_toggleCarcelDadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        ControladorQytetet controlador = new ControladorQytetet();
        Dado.createInstance(controlador);
        CapturaNombreJugadores capturaNombres = new CapturaNombreJugadores(controlador, true);
        ArrayList<String> nombres = capturaNombres.obtenerNombres();
        Qytetet game = Qytetet.getQytetet();
        game.inicializarJuego(nombres);
        controlador.actualizar(game);
        controlador.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton toggleActivarSorpresa;
    private javax.swing.JButton toggleCancelarHipoteca;
    private javax.swing.JButton toggleCarcelDado;
    private javax.swing.JButton toggleCarcelPagando;
    private javax.swing.JButton toggleComprar;
    private javax.swing.JButton toggleEdificarCasa;
    private javax.swing.JButton toggleEdificarHotel;
    private javax.swing.JButton toggleHipotecar;
    private javax.swing.JButton toggleJugar;
    private javax.swing.JButton togglePasarTurno;
    private javax.swing.JButton toggleVender;
    private GUIQytetet.VistaQytetet vistaQytetet;
    // End of variables declaration//GEN-END:variables

    public boolean jugadorEncarcelado() {
        return modeloQytetet.getJugadorActual().getEncarcelado();
    }
    
    public boolean jugadorEnBancarrota() {
        return modeloQytetet.getJugadorActual().bancarrota();
    }
    
    public void checkBancarrota() {
        if (jugadorEnBancarrota())
            endGame();
    }
    
    public void endGame() {
        HashMap<String, Integer> ranking;
        ranking = modeloQytetet.obtenerRanking();
        String xd = "";
        for(Jugador j : modeloQytetet.jugadores())
            xd += "\t" + j.getNombre() + " -> " + ranking.get(j.getNombre()) + "\n";
        JOptionPane.showMessageDialog(this, "Has caido en bancarrota. Fin del juego. \n\nRanking:\n" + xd);
        toggleJugar.setEnabled(false);
        toggleActivarSorpresa.setEnabled(false);
        toggleCancelarHipoteca.setEnabled(false);
        toggleCarcelDado.setEnabled(false);
        toggleCarcelPagando.setEnabled(false);
        toggleComprar.setEnabled(false);
        toggleEdificarCasa.setEnabled(false);
        toggleEdificarHotel.setEnabled(false);
        toggleHipotecar.setEnabled(false);
        togglePasarTurno.setEnabled(false);
        toggleVender.setEnabled(false);
    }
    
    public void actualizar(Qytetet juego) {
        modeloQytetet = juego;
        vistaQytetet.actualizar(juego);
        vistaQytetet.actualizarInfo(" - ");
        habilitarComenzarTurno();
        
        this.repaint();
        this.revalidate();
    }
    
    public void toggleBotonesCarcel() {
        if (jugadorEncarcelado()) {
            toggleCarcelDado.setEnabled(true);
            toggleCarcelPagando.setEnabled(true);
            toggleCancelarHipoteca.setEnabled(false);
            toggleHipotecar.setEnabled(false);
            toggleComprar.setEnabled(false);
            toggleVender.setEnabled(false);
            toggleEdificarCasa.setEnabled(false);
            toggleEdificarHotel.setEnabled(false);
        } else {
            toggleCarcelDado.setEnabled(false);
            toggleCarcelPagando.setEnabled(false);
            toggleCancelarHipoteca.setEnabled(true);
            toggleHipotecar.setEnabled(true);
            toggleVender.setEnabled(true);
            toggleEdificarCasa.setEnabled(true);
            toggleEdificarHotel.setEnabled(true);
        }
    }
    
    public void habilitarComenzarTurno() {
        toggleComprar.setEnabled(false);
        togglePasarTurno.setEnabled(false);
        toggleActivarSorpresa.setEnabled(false);
        
        if (modeloQytetet.getJugadorActual().getEncarcelado()) {
            toggleCarcelDado.setEnabled(true);
            toggleCarcelPagando.setEnabled(true);
        } else {
            toggleJugar.setEnabled(true);
        }
        
        toggleBotonesCarcel();
    }
}
